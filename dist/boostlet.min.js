class $0226f559a631e361$export$638889172ebce0c4 {
    constructor(){
        this.name = "generic";
    }
}



class $5e69f4c14aa403de$export$3d6843c2c4a1bd6c extends (0, $0226f559a631e361$export$638889172ebce0c4) {
    constructor(){
        super();
        this.name = "niivue";
    }
}


class $c41144187e031f80$export$a1c8e230980baa0 {
    constructor(){
        this.framework = null;
    }
    /**
   * Initializes the Boostlet.
   * 
   * This includes several steps such as identifying the 
   * visualization/rendering framework that is available. 
   * 
   * TODO: Later we want to have fallbacks in place if the framework
   * is not detected.
   * 
   * TODO: We also want to have a force mode where the developer
   * can specify which framework to use as a bypass of the detection.
   * 
   */ init() {
        // TODO: detect which framework is available and pick the first one
        this.framework = "niivue";
    }
    /**
   * Let's the user select a region of interest box.
   */ wait_for_box() {
        throw "Missing Implementation.";
    }
    /**
   * Let's the user select (multiple) seeds.
   */ wait_for_seed(howmany) {
        throw "Missing Implementation.";
    }
}


// register global namespace with a new boostlet instance
// later we might want to support multiple active boostlets
window.Boostlet = new (0, $c41144187e031f80$export$a1c8e230980baa0)();


//# sourceMappingURL=boostlet.min.js.map

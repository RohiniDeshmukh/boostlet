{"mappings":"AEAO,MAAM;IAEX,aAAc;QAEZ,IAAI,CAAC,OAAO;IAEd;AAEF;;;;ACNO,MAAM,kDAAe,CAAA,GAAA,yCAAQ;IAElC,aAAc;QAEZ,KAAK;QACL,IAAI,CAAC,OAAO;IAEd;AAGF;;;AFTO,MAAM;IAEX,aAAc;QAEZ,IAAI,CAAC,YAAY;IAEnB;IAEA;;;;;;;;;;;;GAYC,GACD,OAAO;QAEL,mEAAmE;QAEnE,IAAI,CAAC,YAAY;IAEnB;IAEA;;GAEC,GACD,eAAe;QAEb,MAAM;IAER;IAEA;;GAEC,GACD,cAAc,OAAO,EAAE;QAErB,MAAM;IAER;AAEF;;;AD/CA,yDAAyD;AACzD,2DAA2D;AAC3D,OAAO,WAAW,IAAI,CAAA,GAAA,wCAAO","sources":["src/index.js","src/boostlet.js","src/framework.js","src/framework_niivue.js"],"sourcesContent":["\nimport {Boostlet} from \"./boostlet.js\"\n\n// register global namespace with a new boostlet instance\n// later we might want to support multiple active boostlets\nwindow.Boostlet = new Boostlet();\n","import {Framework} from './framework.js';\nimport {NiiVue} from './framework_niivue.js';\n\nexport class Boostlet {\n\n  constructor() {\n\n    this.framework = null;\n\n  }\n\n  /**\n   * Initializes the Boostlet.\n   * \n   * This includes several steps such as identifying the \n   * visualization/rendering framework that is available. \n   * \n   * TODO: Later we want to have fallbacks in place if the framework\n   * is not detected.\n   * \n   * TODO: We also want to have a force mode where the developer\n   * can specify which framework to use as a bypass of the detection.\n   * \n   */\n  init() {\n\n    // TODO: detect which framework is available and pick the first one\n\n    this.framework = 'niivue';\n\n  }\n\n  /**\n   * Let's the user select a region of interest box.\n   */\n  wait_for_box() {\n\n    throw \"Missing Implementation.\";\n\n  }\n\n  /**\n   * Let's the user select (multiple) seeds.\n   */\n  wait_for_seed(howmany) {\n\n    throw \"Missing Implementation.\";\n\n  }\n\n}\n","export class Framework {\n\n  constructor() {\n\n    this.name = 'generic'\n\n  }\n\n}\n","import {Framework} from './framework.js';\n\nexport class NiiVue extends Framework {\n  \n  constructor() {\n\n    super();\n    this.name = 'niivue';\n\n  }\n\n\n}\n"],"names":[],"version":3,"file":"boostlet.min.js.map"}